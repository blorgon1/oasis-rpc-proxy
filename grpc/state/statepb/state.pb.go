// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/state/statepb/state.proto

package statepb

import (
	context "context"
	fmt "fmt"
	accountpb "github.com/figment-networks/oasis-rpc-proxy/grpc/account/accountpb"
	debondingdelegationpb "github.com/figment-networks/oasis-rpc-proxy/grpc/debondingdelegation/debondingdelegationpb"
	delegationpb "github.com/figment-networks/oasis-rpc-proxy/grpc/delegation/delegationpb"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegistryParameters struct {
	// DebugAllowUnroutableAddresses is true iff node registration should
	// allow unroutable addreses.
	DebugAllowUnroutableAddresses bool `protobuf:"varint,1,opt,name=debug_allow_unroutable_addresses,json=debugAllowUnroutableAddresses,proto3" json:"debug_allow_unroutable_addresses,omitempty"`
	// DebugAllowTestRuntimes is true iff test runtimes should be allowed to
	// be registered.
	DebugAllowTestRuntimes bool `protobuf:"varint,2,opt,name=DebugAllowTestRuntimes,proto3" json:"DebugAllowTestRuntimes,omitempty"`
	// DebugAllowEntitySignedNodeRegistration is true iff node registration
	// signed by entity signing keys should be allowed.
	DebugAllowEntitySignedNodeRegistration bool `protobuf:"varint,3,opt,name=DebugAllowEntitySignedNodeRegistration,proto3" json:"DebugAllowEntitySignedNodeRegistration,omitempty"`
	// DebugBypassStake is true iff the registry should bypass all of the staking
	// related checks and operations.
	DebugBypassStake bool `protobuf:"varint,4,opt,name=DebugBypassStake,proto3" json:"DebugBypassStake,omitempty"`
	// DisableRuntimeRegistration is true iff runtime registration should be
	// disabled outside of the genesis block.
	DisableRuntimeRegistration bool `protobuf:"varint,5,opt,name=DisableRuntimeRegistration,proto3" json:"DisableRuntimeRegistration,omitempty"`
	// DisableRuntimeRegistration is true iff key manager runtime registration should be
	// disabled outside of the genesis block.
	DisableKeyManagerRuntimeRegistration bool `protobuf:"varint,6,opt,name=DisableKeyManagerRuntimeRegistration,proto3" json:"DisableKeyManagerRuntimeRegistration,omitempty"`
	// GasCosts are the registry transaction gas costs.
	GasCosts map[string]uint64 `protobuf:"bytes,7,rep,name=GasCosts,proto3" json:"GasCosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// MaxNodeExpiration is the maximum number of epochs relative to the epoch
	// at registration time that a single node registration is valid for.
	MaxNodeExpiration    uint64   `protobuf:"varint,8,opt,name=MaxNodeExpiration,proto3" json:"MaxNodeExpiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryParameters) Reset()         { *m = RegistryParameters{} }
func (m *RegistryParameters) String() string { return proto.CompactTextString(m) }
func (*RegistryParameters) ProtoMessage()    {}
func (*RegistryParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{0}
}

func (m *RegistryParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryParameters.Unmarshal(m, b)
}
func (m *RegistryParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryParameters.Marshal(b, m, deterministic)
}
func (m *RegistryParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryParameters.Merge(m, src)
}
func (m *RegistryParameters) XXX_Size() int {
	return xxx_messageInfo_RegistryParameters.Size(m)
}
func (m *RegistryParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryParameters proto.InternalMessageInfo

func (m *RegistryParameters) GetDebugAllowUnroutableAddresses() bool {
	if m != nil {
		return m.DebugAllowUnroutableAddresses
	}
	return false
}

func (m *RegistryParameters) GetDebugAllowTestRuntimes() bool {
	if m != nil {
		return m.DebugAllowTestRuntimes
	}
	return false
}

func (m *RegistryParameters) GetDebugAllowEntitySignedNodeRegistration() bool {
	if m != nil {
		return m.DebugAllowEntitySignedNodeRegistration
	}
	return false
}

func (m *RegistryParameters) GetDebugBypassStake() bool {
	if m != nil {
		return m.DebugBypassStake
	}
	return false
}

func (m *RegistryParameters) GetDisableRuntimeRegistration() bool {
	if m != nil {
		return m.DisableRuntimeRegistration
	}
	return false
}

func (m *RegistryParameters) GetDisableKeyManagerRuntimeRegistration() bool {
	if m != nil {
		return m.DisableKeyManagerRuntimeRegistration
	}
	return false
}

func (m *RegistryParameters) GetGasCosts() map[string]uint64 {
	if m != nil {
		return m.GasCosts
	}
	return nil
}

func (m *RegistryParameters) GetMaxNodeExpiration() uint64 {
	if m != nil {
		return m.MaxNodeExpiration
	}
	return 0
}

type Entity struct {
	PublicKey            string   `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{1}
}

func (m *Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity.Unmarshal(m, b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return xxx_messageInfo_Entity.Size(m)
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type Registry struct {
	// Parameters are the registry consensus parameters.
	Parameters *RegistryParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Entities is the initial list of entities.
	Entities             []*Entity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Registry) Reset()         { *m = Registry{} }
func (m *Registry) String() string { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()    {}
func (*Registry) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{2}
}

func (m *Registry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Registry.Unmarshal(m, b)
}
func (m *Registry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Registry.Marshal(b, m, deterministic)
}
func (m *Registry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registry.Merge(m, src)
}
func (m *Registry) XXX_Size() int {
	return xxx_messageInfo_Registry.Size(m)
}
func (m *Registry) XXX_DiscardUnknown() {
	xxx_messageInfo_Registry.DiscardUnknown(m)
}

var xxx_messageInfo_Registry proto.InternalMessageInfo

func (m *Registry) GetParameters() *RegistryParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Registry) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type Slash struct {
	Amount               []byte   `protobuf:"bytes,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	FreezeInterval       uint64   `protobuf:"varint,2,opt,name=FreezeInterval,proto3" json:"FreezeInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slash) Reset()         { *m = Slash{} }
func (m *Slash) String() string { return proto.CompactTextString(m) }
func (*Slash) ProtoMessage()    {}
func (*Slash) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{3}
}

func (m *Slash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slash.Unmarshal(m, b)
}
func (m *Slash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slash.Marshal(b, m, deterministic)
}
func (m *Slash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slash.Merge(m, src)
}
func (m *Slash) XXX_Size() int {
	return xxx_messageInfo_Slash.Size(m)
}
func (m *Slash) XXX_DiscardUnknown() {
	xxx_messageInfo_Slash.DiscardUnknown(m)
}

var xxx_messageInfo_Slash proto.InternalMessageInfo

func (m *Slash) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Slash) GetFreezeInterval() uint64 {
	if m != nil {
		return m.FreezeInterval
	}
	return 0
}

type RewardStep struct {
	Until                uint64   `protobuf:"varint,1,opt,name=Until,proto3" json:"Until,omitempty"`
	Scale                []byte   `protobuf:"bytes,2,opt,name=Scale,proto3" json:"Scale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardStep) Reset()         { *m = RewardStep{} }
func (m *RewardStep) String() string { return proto.CompactTextString(m) }
func (*RewardStep) ProtoMessage()    {}
func (*RewardStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{4}
}

func (m *RewardStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RewardStep.Unmarshal(m, b)
}
func (m *RewardStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RewardStep.Marshal(b, m, deterministic)
}
func (m *RewardStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardStep.Merge(m, src)
}
func (m *RewardStep) XXX_Size() int {
	return xxx_messageInfo_RewardStep.Size(m)
}
func (m *RewardStep) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardStep.DiscardUnknown(m)
}

var xxx_messageInfo_RewardStep proto.InternalMessageInfo

func (m *RewardStep) GetUntil() uint64 {
	if m != nil {
		return m.Until
	}
	return 0
}

func (m *RewardStep) GetScale() []byte {
	if m != nil {
		return m.Scale
	}
	return nil
}

type CommissionScheduleRules struct {
	RateChangeInterval   uint64   `protobuf:"varint,1,opt,name=RateChangeInterval,proto3" json:"RateChangeInterval,omitempty"`
	RateBoundLead        uint64   `protobuf:"varint,2,opt,name=RateBoundLead,proto3" json:"RateBoundLead,omitempty"`
	MaxRateSteps         int64    `protobuf:"varint,3,opt,name=MaxRateSteps,proto3" json:"MaxRateSteps,omitempty"`
	MaxBoundSteps        int64    `protobuf:"varint,4,opt,name=MaxBoundSteps,proto3" json:"MaxBoundSteps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommissionScheduleRules) Reset()         { *m = CommissionScheduleRules{} }
func (m *CommissionScheduleRules) String() string { return proto.CompactTextString(m) }
func (*CommissionScheduleRules) ProtoMessage()    {}
func (*CommissionScheduleRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{5}
}

func (m *CommissionScheduleRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommissionScheduleRules.Unmarshal(m, b)
}
func (m *CommissionScheduleRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommissionScheduleRules.Marshal(b, m, deterministic)
}
func (m *CommissionScheduleRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionScheduleRules.Merge(m, src)
}
func (m *CommissionScheduleRules) XXX_Size() int {
	return xxx_messageInfo_CommissionScheduleRules.Size(m)
}
func (m *CommissionScheduleRules) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionScheduleRules.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionScheduleRules proto.InternalMessageInfo

func (m *CommissionScheduleRules) GetRateChangeInterval() uint64 {
	if m != nil {
		return m.RateChangeInterval
	}
	return 0
}

func (m *CommissionScheduleRules) GetRateBoundLead() uint64 {
	if m != nil {
		return m.RateBoundLead
	}
	return 0
}

func (m *CommissionScheduleRules) GetMaxRateSteps() int64 {
	if m != nil {
		return m.MaxRateSteps
	}
	return 0
}

func (m *CommissionScheduleRules) GetMaxBoundSteps() int64 {
	if m != nil {
		return m.MaxBoundSteps
	}
	return 0
}

type StakingParameters struct {
	Thresholds                        map[int64][]byte         `protobuf:"bytes,1,rep,name=Thresholds,proto3" json:"Thresholds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DebondingInterval                 uint64                   `protobuf:"varint,2,opt,name=DebondingInterval,proto3" json:"DebondingInterval,omitempty"`
	RewardSchedule                    []*RewardStep            `protobuf:"bytes,3,rep,name=RewardSchedule,proto3" json:"RewardSchedule,omitempty"`
	SigningRewardThresholdNumerator   uint64                   `protobuf:"varint,4,opt,name=SigningRewardThresholdNumerator,proto3" json:"SigningRewardThresholdNumerator,omitempty"`
	SigningRewardThresholdDenominator uint64                   `protobuf:"varint,5,opt,name=SigningRewardThresholdDenominator,proto3" json:"SigningRewardThresholdDenominator,omitempty"`
	CommissionScheduleRules           *CommissionScheduleRules `protobuf:"bytes,6,opt,name=CommissionScheduleRules,proto3" json:"CommissionScheduleRules,omitempty"`
	Slashing                          map[string]*Slash        `protobuf:"bytes,7,rep,name=Slashing,proto3" json:"Slashing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GasCosts                          map[string]uint64        `protobuf:"bytes,8,rep,name=GasCosts,proto3" json:"GasCosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MinDelegationAmount               []byte                   `protobuf:"bytes,9,opt,name=MinDelegationAmount,proto3" json:"MinDelegationAmount,omitempty"`
	DisableTransfers                  bool                     `protobuf:"varint,10,opt,name=DisableTransfers,proto3" json:"DisableTransfers,omitempty"`
	DisableDelegation                 bool                     `protobuf:"varint,11,opt,name=DisableDelegation,proto3" json:"DisableDelegation,omitempty"`
	UndisableTransfersFrom            map[string]bool          `protobuf:"bytes,12,rep,name=UndisableTransfersFrom,proto3" json:"UndisableTransfersFrom,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// FeeSplitWeightPropose is the proportion of block fee portions that go to the proposer.
	FeeSplitWeightPropose []byte `protobuf:"bytes,13,opt,name=FeeSplitWeightPropose,proto3" json:"FeeSplitWeightPropose,omitempty"`
	// FeeSplitWeightVote is the proportion of block fee portions that go to the validator that votes.
	FeeSplitWeightVote []byte `protobuf:"bytes,14,opt,name=FeeSplitWeightVote,proto3" json:"FeeSplitWeightVote,omitempty"`
	// FeeSplitWeightNextPropose is the proportion of block fee portions that go to the next block's proposer.
	FeeSplitWeightNextPropose []byte `protobuf:"bytes,15,opt,name=FeeSplitWeightNextPropose,proto3" json:"FeeSplitWeightNextPropose,omitempty"`
	// RewardFactorEpochSigned is the factor for a reward distributed per epoch to
	// entities that have signed at least a threshold fraction of the blocks.
	RewardFactorEpochSigned []byte `protobuf:"bytes,16,opt,name=RewardFactorEpochSigned,proto3" json:"RewardFactorEpochSigned,omitempty"`
	// RewardFactorBlockProposed is the factor for a reward distributed per block
	// to the entity that proposed the block.
	RewardFactorBlockProposed []byte   `protobuf:"bytes,17,opt,name=RewardFactorBlockProposed,proto3" json:"RewardFactorBlockProposed,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *StakingParameters) Reset()         { *m = StakingParameters{} }
func (m *StakingParameters) String() string { return proto.CompactTextString(m) }
func (*StakingParameters) ProtoMessage()    {}
func (*StakingParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{6}
}

func (m *StakingParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StakingParameters.Unmarshal(m, b)
}
func (m *StakingParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StakingParameters.Marshal(b, m, deterministic)
}
func (m *StakingParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingParameters.Merge(m, src)
}
func (m *StakingParameters) XXX_Size() int {
	return xxx_messageInfo_StakingParameters.Size(m)
}
func (m *StakingParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingParameters.DiscardUnknown(m)
}

var xxx_messageInfo_StakingParameters proto.InternalMessageInfo

func (m *StakingParameters) GetThresholds() map[int64][]byte {
	if m != nil {
		return m.Thresholds
	}
	return nil
}

func (m *StakingParameters) GetDebondingInterval() uint64 {
	if m != nil {
		return m.DebondingInterval
	}
	return 0
}

func (m *StakingParameters) GetRewardSchedule() []*RewardStep {
	if m != nil {
		return m.RewardSchedule
	}
	return nil
}

func (m *StakingParameters) GetSigningRewardThresholdNumerator() uint64 {
	if m != nil {
		return m.SigningRewardThresholdNumerator
	}
	return 0
}

func (m *StakingParameters) GetSigningRewardThresholdDenominator() uint64 {
	if m != nil {
		return m.SigningRewardThresholdDenominator
	}
	return 0
}

func (m *StakingParameters) GetCommissionScheduleRules() *CommissionScheduleRules {
	if m != nil {
		return m.CommissionScheduleRules
	}
	return nil
}

func (m *StakingParameters) GetSlashing() map[string]*Slash {
	if m != nil {
		return m.Slashing
	}
	return nil
}

func (m *StakingParameters) GetGasCosts() map[string]uint64 {
	if m != nil {
		return m.GasCosts
	}
	return nil
}

func (m *StakingParameters) GetMinDelegationAmount() []byte {
	if m != nil {
		return m.MinDelegationAmount
	}
	return nil
}

func (m *StakingParameters) GetDisableTransfers() bool {
	if m != nil {
		return m.DisableTransfers
	}
	return false
}

func (m *StakingParameters) GetDisableDelegation() bool {
	if m != nil {
		return m.DisableDelegation
	}
	return false
}

func (m *StakingParameters) GetUndisableTransfersFrom() map[string]bool {
	if m != nil {
		return m.UndisableTransfersFrom
	}
	return nil
}

func (m *StakingParameters) GetFeeSplitWeightPropose() []byte {
	if m != nil {
		return m.FeeSplitWeightPropose
	}
	return nil
}

func (m *StakingParameters) GetFeeSplitWeightVote() []byte {
	if m != nil {
		return m.FeeSplitWeightVote
	}
	return nil
}

func (m *StakingParameters) GetFeeSplitWeightNextPropose() []byte {
	if m != nil {
		return m.FeeSplitWeightNextPropose
	}
	return nil
}

func (m *StakingParameters) GetRewardFactorEpochSigned() []byte {
	if m != nil {
		return m.RewardFactorEpochSigned
	}
	return nil
}

func (m *StakingParameters) GetRewardFactorBlockProposed() []byte {
	if m != nil {
		return m.RewardFactorBlockProposed
	}
	return nil
}

type Staking struct {
	TotalSupply          []byte                                                     `protobuf:"bytes,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	CommonPool           []byte                                                     `protobuf:"bytes,2,opt,name=common_pool,json=commonPool,proto3" json:"common_pool,omitempty"`
	Parameters           *StakingParameters                                         `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Ledger               map[string]*accountpb.Account                              `protobuf:"bytes,4,rep,name=ledger,proto3" json:"ledger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Delegations          map[string]*delegationpb.DelegationEntry                   `protobuf:"bytes,5,rep,name=delegations,proto3" json:"delegations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DebondingDelegations map[string]*debondingdelegationpb.DebondingDelegationEntry `protobuf:"bytes,6,rep,name=debonding_delegations,json=debondingDelegations,proto3" json:"debonding_delegations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *Staking) Reset()         { *m = Staking{} }
func (m *Staking) String() string { return proto.CompactTextString(m) }
func (*Staking) ProtoMessage()    {}
func (*Staking) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{7}
}

func (m *Staking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Staking.Unmarshal(m, b)
}
func (m *Staking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Staking.Marshal(b, m, deterministic)
}
func (m *Staking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staking.Merge(m, src)
}
func (m *Staking) XXX_Size() int {
	return xxx_messageInfo_Staking.Size(m)
}
func (m *Staking) XXX_DiscardUnknown() {
	xxx_messageInfo_Staking.DiscardUnknown(m)
}

var xxx_messageInfo_Staking proto.InternalMessageInfo

func (m *Staking) GetTotalSupply() []byte {
	if m != nil {
		return m.TotalSupply
	}
	return nil
}

func (m *Staking) GetCommonPool() []byte {
	if m != nil {
		return m.CommonPool
	}
	return nil
}

func (m *Staking) GetParameters() *StakingParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Staking) GetLedger() map[string]*accountpb.Account {
	if m != nil {
		return m.Ledger
	}
	return nil
}

func (m *Staking) GetDelegations() map[string]*delegationpb.DelegationEntry {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *Staking) GetDebondingDelegations() map[string]*debondingdelegationpb.DebondingDelegationEntry {
	if m != nil {
		return m.DebondingDelegations
	}
	return nil
}

type SchedulerParams struct {
	// MinValidators is the minimum number of validators that MUST be
	// present in elected validator sets.
	MinValidators int64 `protobuf:"varint,1,opt,name=MinValidators,proto3" json:"MinValidators,omitempty"`
	// MaxValidators is the maximum number of validators that MAY be
	// present in elected validator sets.
	MaxValidators int64 `protobuf:"varint,2,opt,name=MaxValidators,proto3" json:"MaxValidators,omitempty"`
	// MaxValidatorsPerEntity is the maximum number of validators that
	// may be elected per entity in a single validator set.
	MaxValidatorsPerEntity int64 `protobuf:"varint,3,opt,name=MaxValidatorsPerEntity,proto3" json:"MaxValidatorsPerEntity,omitempty"`
	// DebugBypassStake is true iff the scheduler should bypass all of
	// the staking related checks and operations.
	DebugBypassStake bool `protobuf:"varint,4,opt,name=DebugBypassStake,proto3" json:"DebugBypassStake,omitempty"`
	// DebugStaticValidators is true iff the scheduler should use
	// a static validator set instead of electing anything.
	DebugStaticValidators bool `protobuf:"varint,5,opt,name=DebugStaticValidators,proto3" json:"DebugStaticValidators,omitempty"`
	// RewardFactorEpochElectionAny is the factor for a reward
	// distributed per epoch to entities that have any node considered
	// in any election.
	RewardFactorEpochElectionAny []byte   `protobuf:"bytes,6,opt,name=RewardFactorEpochElectionAny,proto3" json:"RewardFactorEpochElectionAny,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *SchedulerParams) Reset()         { *m = SchedulerParams{} }
func (m *SchedulerParams) String() string { return proto.CompactTextString(m) }
func (*SchedulerParams) ProtoMessage()    {}
func (*SchedulerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{8}
}

func (m *SchedulerParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulerParams.Unmarshal(m, b)
}
func (m *SchedulerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulerParams.Marshal(b, m, deterministic)
}
func (m *SchedulerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerParams.Merge(m, src)
}
func (m *SchedulerParams) XXX_Size() int {
	return xxx_messageInfo_SchedulerParams.Size(m)
}
func (m *SchedulerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerParams.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerParams proto.InternalMessageInfo

func (m *SchedulerParams) GetMinValidators() int64 {
	if m != nil {
		return m.MinValidators
	}
	return 0
}

func (m *SchedulerParams) GetMaxValidators() int64 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *SchedulerParams) GetMaxValidatorsPerEntity() int64 {
	if m != nil {
		return m.MaxValidatorsPerEntity
	}
	return 0
}

func (m *SchedulerParams) GetDebugBypassStake() bool {
	if m != nil {
		return m.DebugBypassStake
	}
	return false
}

func (m *SchedulerParams) GetDebugStaticValidators() bool {
	if m != nil {
		return m.DebugStaticValidators
	}
	return false
}

func (m *SchedulerParams) GetRewardFactorEpochElectionAny() []byte {
	if m != nil {
		return m.RewardFactorEpochElectionAny
	}
	return nil
}

type Scheduler struct {
	Params               *SchedulerParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Scheduler) Reset()         { *m = Scheduler{} }
func (m *Scheduler) String() string { return proto.CompactTextString(m) }
func (*Scheduler) ProtoMessage()    {}
func (*Scheduler) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{9}
}

func (m *Scheduler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scheduler.Unmarshal(m, b)
}
func (m *Scheduler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scheduler.Marshal(b, m, deterministic)
}
func (m *Scheduler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scheduler.Merge(m, src)
}
func (m *Scheduler) XXX_Size() int {
	return xxx_messageInfo_Scheduler.Size(m)
}
func (m *Scheduler) XXX_DiscardUnknown() {
	xxx_messageInfo_Scheduler.DiscardUnknown(m)
}

var xxx_messageInfo_Scheduler proto.InternalMessageInfo

func (m *Scheduler) GetParams() *SchedulerParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type ConsensusParams struct {
	TimeoutCommit        *duration.Duration `protobuf:"bytes,1,opt,name=TimeoutCommit,proto3" json:"TimeoutCommit,omitempty"`
	SkipTimeoutCommit    bool               `protobuf:"varint,2,opt,name=SkipTimeoutCommit,proto3" json:"SkipTimeoutCommit,omitempty"`
	EmptyBlockInterval   *duration.Duration `protobuf:"bytes,3,opt,name=EmptyBlockInterval,proto3" json:"EmptyBlockInterval,omitempty"`
	MaxTxSize            uint64             `protobuf:"varint,4,opt,name=MaxTxSize,proto3" json:"MaxTxSize,omitempty"`
	MaxBlockSize         uint64             `protobuf:"varint,5,opt,name=MaxBlockSize,proto3" json:"MaxBlockSize,omitempty"`
	MaxBlockGas          uint64             `protobuf:"varint,6,opt,name=MaxBlockGas,proto3" json:"MaxBlockGas,omitempty"`
	MaxEvidenceAgeBlocks uint64             `protobuf:"varint,7,opt,name=MaxEvidenceAgeBlocks,proto3" json:"MaxEvidenceAgeBlocks,omitempty"`
	MaxEvidenceAgeTime   string             `protobuf:"bytes,8,opt,name=MaxEvidenceAgeTime,proto3" json:"MaxEvidenceAgeTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ConsensusParams) Reset()         { *m = ConsensusParams{} }
func (m *ConsensusParams) String() string { return proto.CompactTextString(m) }
func (*ConsensusParams) ProtoMessage()    {}
func (*ConsensusParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{10}
}

func (m *ConsensusParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusParams.Unmarshal(m, b)
}
func (m *ConsensusParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusParams.Marshal(b, m, deterministic)
}
func (m *ConsensusParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusParams.Merge(m, src)
}
func (m *ConsensusParams) XXX_Size() int {
	return xxx_messageInfo_ConsensusParams.Size(m)
}
func (m *ConsensusParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusParams.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusParams proto.InternalMessageInfo

func (m *ConsensusParams) GetTimeoutCommit() *duration.Duration {
	if m != nil {
		return m.TimeoutCommit
	}
	return nil
}

func (m *ConsensusParams) GetSkipTimeoutCommit() bool {
	if m != nil {
		return m.SkipTimeoutCommit
	}
	return false
}

func (m *ConsensusParams) GetEmptyBlockInterval() *duration.Duration {
	if m != nil {
		return m.EmptyBlockInterval
	}
	return nil
}

func (m *ConsensusParams) GetMaxTxSize() uint64 {
	if m != nil {
		return m.MaxTxSize
	}
	return 0
}

func (m *ConsensusParams) GetMaxBlockSize() uint64 {
	if m != nil {
		return m.MaxBlockSize
	}
	return 0
}

func (m *ConsensusParams) GetMaxBlockGas() uint64 {
	if m != nil {
		return m.MaxBlockGas
	}
	return 0
}

func (m *ConsensusParams) GetMaxEvidenceAgeBlocks() uint64 {
	if m != nil {
		return m.MaxEvidenceAgeBlocks
	}
	return 0
}

func (m *ConsensusParams) GetMaxEvidenceAgeTime() string {
	if m != nil {
		return m.MaxEvidenceAgeTime
	}
	return ""
}

type Consensus struct {
	Backend              string           `protobuf:"bytes,1,opt,name=Backend,proto3" json:"Backend,omitempty"`
	Params               *ConsensusParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Consensus) Reset()         { *m = Consensus{} }
func (m *Consensus) String() string { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()    {}
func (*Consensus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{11}
}

func (m *Consensus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consensus.Unmarshal(m, b)
}
func (m *Consensus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consensus.Marshal(b, m, deterministic)
}
func (m *Consensus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consensus.Merge(m, src)
}
func (m *Consensus) XXX_Size() int {
	return xxx_messageInfo_Consensus.Size(m)
}
func (m *Consensus) XXX_DiscardUnknown() {
	xxx_messageInfo_Consensus.DiscardUnknown(m)
}

var xxx_messageInfo_Consensus proto.InternalMessageInfo

func (m *Consensus) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func (m *Consensus) GetParams() *ConsensusParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type State struct {
	// Height is the block height at which the document was generated.
	Height int64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	// Time is the time the genesis block was constructed.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=Time,proto3" json:"Time,omitempty"`
	// ChainID is the ID of the chain.
	ChainID string `protobuf:"bytes,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	// Registry is the registry genesis state.
	Registry *Registry `protobuf:"bytes,4,opt,name=registry,proto3" json:"registry,omitempty"`
	// Staking is the staking genesis state.
	Staking *Staking `protobuf:"bytes,5,opt,name=staking,proto3" json:"staking,omitempty"`
	// Scheduler is the scheduler genesis state.
	Scheduler *Scheduler `protobuf:"bytes,6,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Consensus is the consensus genesis state.
	Consensus            *Consensus `protobuf:"bytes,7,opt,name=consensus,proto3" json:"consensus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{12}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *State) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *State) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *State) GetRegistry() *Registry {
	if m != nil {
		return m.Registry
	}
	return nil
}

func (m *State) GetStaking() *Staking {
	if m != nil {
		return m.Staking
	}
	return nil
}

func (m *State) GetScheduler() *Scheduler {
	if m != nil {
		return m.Scheduler
	}
	return nil
}

func (m *State) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

type GetByHeightRequest struct {
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByHeightRequest) Reset()         { *m = GetByHeightRequest{} }
func (m *GetByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetByHeightRequest) ProtoMessage()    {}
func (*GetByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{13}
}

func (m *GetByHeightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByHeightRequest.Unmarshal(m, b)
}
func (m *GetByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByHeightRequest.Marshal(b, m, deterministic)
}
func (m *GetByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByHeightRequest.Merge(m, src)
}
func (m *GetByHeightRequest) XXX_Size() int {
	return xxx_messageInfo_GetByHeightRequest.Size(m)
}
func (m *GetByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByHeightRequest proto.InternalMessageInfo

func (m *GetByHeightRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetByHeightResponse struct {
	State                *State   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByHeightResponse) Reset()         { *m = GetByHeightResponse{} }
func (m *GetByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetByHeightResponse) ProtoMessage()    {}
func (*GetByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1eb66f0ea6a76, []int{14}
}

func (m *GetByHeightResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByHeightResponse.Unmarshal(m, b)
}
func (m *GetByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByHeightResponse.Marshal(b, m, deterministic)
}
func (m *GetByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByHeightResponse.Merge(m, src)
}
func (m *GetByHeightResponse) XXX_Size() int {
	return xxx_messageInfo_GetByHeightResponse.Size(m)
}
func (m *GetByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetByHeightResponse proto.InternalMessageInfo

func (m *GetByHeightResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistryParameters)(nil), "state.RegistryParameters")
	proto.RegisterMapType((map[string]uint64)(nil), "state.RegistryParameters.GasCostsEntry")
	proto.RegisterType((*Entity)(nil), "state.Entity")
	proto.RegisterType((*Registry)(nil), "state.Registry")
	proto.RegisterType((*Slash)(nil), "state.Slash")
	proto.RegisterType((*RewardStep)(nil), "state.RewardStep")
	proto.RegisterType((*CommissionScheduleRules)(nil), "state.CommissionScheduleRules")
	proto.RegisterType((*StakingParameters)(nil), "state.StakingParameters")
	proto.RegisterMapType((map[string]uint64)(nil), "state.StakingParameters.GasCostsEntry")
	proto.RegisterMapType((map[string]*Slash)(nil), "state.StakingParameters.SlashingEntry")
	proto.RegisterMapType((map[int64][]byte)(nil), "state.StakingParameters.ThresholdsEntry")
	proto.RegisterMapType((map[string]bool)(nil), "state.StakingParameters.UndisableTransfersFromEntry")
	proto.RegisterType((*Staking)(nil), "state.Staking")
	proto.RegisterMapType((map[string]*debondingdelegationpb.DebondingDelegationEntry)(nil), "state.Staking.DebondingDelegationsEntry")
	proto.RegisterMapType((map[string]*delegationpb.DelegationEntry)(nil), "state.Staking.DelegationsEntry")
	proto.RegisterMapType((map[string]*accountpb.Account)(nil), "state.Staking.LedgerEntry")
	proto.RegisterType((*SchedulerParams)(nil), "state.SchedulerParams")
	proto.RegisterType((*Scheduler)(nil), "state.Scheduler")
	proto.RegisterType((*ConsensusParams)(nil), "state.ConsensusParams")
	proto.RegisterType((*Consensus)(nil), "state.Consensus")
	proto.RegisterType((*State)(nil), "state.State")
	proto.RegisterType((*GetByHeightRequest)(nil), "state.GetByHeightRequest")
	proto.RegisterType((*GetByHeightResponse)(nil), "state.GetByHeightResponse")
}

func init() { proto.RegisterFile("grpc/state/statepb/state.proto", fileDescriptor_fff1eb66f0ea6a76) }

var fileDescriptor_fff1eb66f0ea6a76 = []byte{
	// 1681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xef, 0x6e, 0x1b, 0xb9,
	0x11, 0xaf, 0x2d, 0xd9, 0x91, 0x47, 0x72, 0xec, 0xf0, 0x12, 0x9f, 0xa2, 0xbb, 0x26, 0x3e, 0x21,
	0x70, 0xdd, 0xf6, 0x2c, 0xb7, 0x6a, 0x70, 0x48, 0x7a, 0xed, 0xb5, 0xfe, 0x1f, 0x23, 0x71, 0x60,
	0xac, 0x9c, 0xb4, 0x68, 0x51, 0x18, 0xd4, 0x2e, 0xb3, 0x22, 0xbc, 0x22, 0xb7, 0x4b, 0xca, 0x91,
	0xee, 0x35, 0xfa, 0x02, 0x7d, 0x8d, 0xa2, 0xcf, 0xd2, 0xef, 0x7d, 0x8b, 0x16, 0x1c, 0x72, 0x57,
	0xbb, 0xd2, 0x2a, 0xbe, 0xa2, 0x5f, 0xac, 0xe5, 0xcc, 0x6f, 0x66, 0xc8, 0x99, 0xe1, 0xcc, 0xd0,
	0xf0, 0x24, 0x4c, 0x62, 0x7f, 0x5f, 0x69, 0xaa, 0x99, 0xfd, 0x1b, 0xf7, 0xed, 0x6f, 0x27, 0x4e,
	0xa4, 0x96, 0x64, 0x05, 0x17, 0xad, 0xa7, 0xa1, 0x94, 0x61, 0xc4, 0xf6, 0x91, 0xd8, 0x1f, 0x7d,
	0xd8, 0xd7, 0x7c, 0xc8, 0x94, 0xa6, 0xc3, 0xd8, 0xe2, 0x5a, 0x4f, 0x66, 0x01, 0xc1, 0x28, 0xa1,
	0x9a, 0x4b, 0xe1, 0xf8, 0xcf, 0xd0, 0x0e, 0xf5, 0x7d, 0x39, 0x12, 0x3a, 0xfd, 0x8d, 0xfb, 0xe9,
	0x97, 0x43, 0xed, 0x21, 0x2a, 0x60, 0x11, 0x0b, 0x51, 0x38, 0xf7, 0x19, 0xf7, 0x73, 0x0b, 0x07,
	0x3f, 0x77, 0xf0, 0xbe, 0x14, 0x01, 0x17, 0x61, 0x41, 0x6e, 0x8e, 0x86, 0x0a, 0x1c, 0xf5, 0x7a,
	0x56, 0x55, 0xfb, 0x5f, 0x55, 0x20, 0x1e, 0x0b, 0xb9, 0xd2, 0xc9, 0xe4, 0x92, 0x26, 0x74, 0xc8,
	0x34, 0x4b, 0x14, 0x39, 0x83, 0xed, 0x80, 0xf5, 0x47, 0xe1, 0x35, 0x8d, 0x22, 0xf9, 0xf1, 0x7a,
	0x24, 0x12, 0x39, 0xd2, 0xb4, 0x1f, 0xb1, 0x6b, 0x1a, 0x04, 0x09, 0x53, 0x8a, 0xa9, 0xe6, 0xd2,
	0xf6, 0xd2, 0x6e, 0xcd, 0xfb, 0x31, 0xe2, 0x0e, 0x0c, 0xec, 0x5d, 0x86, 0x3a, 0x48, 0x41, 0xe4,
	0x1b, 0xd8, 0x3a, 0xce, 0x00, 0x57, 0x4c, 0x69, 0x6f, 0x24, 0xd0, 0x87, 0xcd, 0x65, 0x14, 0x5f,
	0xc0, 0x25, 0xef, 0x61, 0x67, 0xca, 0x39, 0x11, 0x9a, 0xeb, 0x49, 0x8f, 0x87, 0x82, 0x05, 0x6f,
	0x65, 0xc0, 0xdc, 0x86, 0xf1, 0x1c, 0xcd, 0x0a, 0xea, 0xf9, 0x81, 0x68, 0xf2, 0x33, 0xd8, 0x44,
	0xe4, 0xe1, 0x24, 0xa6, 0x4a, 0xf5, 0x34, 0xbd, 0x61, 0xcd, 0x2a, 0x6a, 0x98, 0xa3, 0x93, 0xef,
	0xa0, 0x75, 0xcc, 0x95, 0x39, 0x8f, 0xdb, 0x56, 0xc1, 0xee, 0x0a, 0x4a, 0x7d, 0x02, 0x41, 0x3c,
	0x78, 0xe6, 0xb8, 0xaf, 0xd9, 0xe4, 0x82, 0x0a, 0x1a, 0xb2, 0xa4, 0x4c, 0xd3, 0x2a, 0x6a, 0xfa,
	0x41, 0x58, 0x72, 0x04, 0xb5, 0x33, 0xaa, 0x8e, 0xa4, 0xd2, 0xaa, 0x79, 0x6f, 0xbb, 0xb2, 0x5b,
	0xef, 0xfe, 0xa4, 0x63, 0xf3, 0x76, 0x3e, 0x8a, 0x9d, 0x14, 0x79, 0x22, 0x74, 0x32, 0xf1, 0x32,
	0x41, 0xf2, 0x35, 0x3c, 0xb8, 0xa0, 0x63, 0xe3, 0x9b, 0x93, 0x71, 0xcc, 0xdd, 0x2e, 0x6a, 0xdb,
	0x4b, 0xbb, 0x55, 0x6f, 0x9e, 0xd1, 0xfa, 0x16, 0xd6, 0x0b, 0x8a, 0xc8, 0x26, 0x54, 0x6e, 0xd8,
	0x04, 0xe3, 0xbf, 0xe6, 0x99, 0x4f, 0xf2, 0x10, 0x56, 0x6e, 0x69, 0x34, 0x62, 0x18, 0xd4, 0xaa,
	0x67, 0x17, 0xbf, 0x5e, 0x7e, 0xb1, 0xd4, 0xde, 0x81, 0x55, 0x1b, 0x0f, 0xf2, 0x25, 0xac, 0x5d,
	0x8e, 0xfa, 0x11, 0xf7, 0x5f, 0x67, 0xb2, 0x53, 0x42, 0x3b, 0x86, 0x5a, 0x7a, 0x00, 0xf2, 0x12,
	0x20, 0xce, 0x0e, 0x81, 0xd0, 0x7a, 0xf7, 0xf1, 0xc2, 0x53, 0x7a, 0x39, 0x30, 0xf9, 0x29, 0xd4,
	0x98, 0x31, 0xc7, 0x31, 0xc1, 0x8c, 0x7b, 0xd6, 0x9d, 0xa0, 0xdd, 0x85, 0x97, 0xb1, 0xdb, 0x67,
	0xb0, 0xd2, 0x8b, 0xa8, 0x1a, 0x90, 0x2d, 0x58, 0x3d, 0x18, 0x9a, 0xcb, 0x88, 0xa6, 0x1a, 0x9e,
	0x5b, 0x91, 0x1d, 0xb8, 0x7f, 0x9a, 0x30, 0xf6, 0x3d, 0x3b, 0x17, 0x9a, 0x25, 0xb7, 0x34, 0x72,
	0xa7, 0x9b, 0xa1, 0xb6, 0x5f, 0x00, 0x78, 0xec, 0x23, 0x4d, 0x82, 0x9e, 0x66, 0xb1, 0x71, 0xc5,
	0x3b, 0xa1, 0x79, 0x84, 0xca, 0xaa, 0x9e, 0x5d, 0x18, 0x6a, 0xcf, 0xa7, 0x91, 0x75, 0x50, 0xc3,
	0xb3, 0x8b, 0xf6, 0x3f, 0x96, 0xe0, 0xf3, 0x23, 0x39, 0x1c, 0x72, 0xa5, 0xb8, 0x14, 0x3d, 0x7f,
	0xc0, 0x82, 0x91, 0x49, 0xa5, 0x88, 0x29, 0xd2, 0x01, 0xe2, 0x51, 0xcd, 0x8e, 0x06, 0x54, 0x84,
	0xd3, 0x1d, 0x58, 0xa5, 0x25, 0x1c, 0xf2, 0x0c, 0xd6, 0x0d, 0xf5, 0x50, 0x8e, 0x44, 0xf0, 0x86,
	0xd1, 0xc0, 0x6d, 0xb6, 0x48, 0x24, 0x6d, 0x68, 0x5c, 0xd0, 0xb1, 0xa1, 0x99, 0xcd, 0x2a, 0xbc,
	0x3c, 0x15, 0xaf, 0x40, 0x33, 0x9a, 0x2e, 0xe8, 0x18, 0x65, 0x2c, 0xa8, 0x8a, 0xa0, 0x22, 0xb1,
	0xfd, 0x6f, 0x80, 0x07, 0xe6, 0x9a, 0x70, 0x11, 0xe6, 0xea, 0xc6, 0x2b, 0x80, 0xab, 0x41, 0xc2,
	0xd4, 0x40, 0x46, 0x81, 0x09, 0x9d, 0x89, 0xc0, 0xae, 0x8b, 0xc0, 0x1c, 0xba, 0x33, 0x85, 0xda,
	0x0c, 0xcd, 0xc9, 0x9a, 0x1c, 0x3d, 0x4e, 0xcb, 0xd6, 0x4c, 0x00, 0xe6, 0x19, 0xe4, 0x25, 0xdc,
	0x77, 0x31, 0x70, 0x4e, 0x6c, 0x56, 0xd0, 0xf6, 0x83, 0x2c, 0x6d, 0xd2, 0x00, 0x79, 0x33, 0x40,
	0xf2, 0x0a, 0x9e, 0x9a, 0x5a, 0xc1, 0x45, 0x68, 0x19, 0xd9, 0x1e, 0xde, 0x8e, 0x86, 0x2c, 0xa1,
	0x5a, 0x26, 0xe8, 0x80, 0xaa, 0x77, 0x17, 0x8c, 0xbc, 0x81, 0xaf, 0xca, 0x21, 0xc7, 0x4c, 0xc8,
	0x21, 0x17, 0xa8, 0x6b, 0x05, 0x75, 0xdd, 0x0d, 0x24, 0x7f, 0x5c, 0x98, 0x1b, 0x58, 0x30, 0xea,
	0xdd, 0x27, 0xee, 0x6c, 0x0b, 0x50, 0xde, 0xc2, 0xd4, 0x3a, 0x84, 0x1a, 0x66, 0x3e, 0x17, 0xa1,
	0xab, 0x21, 0x3b, 0x0b, 0x43, 0x94, 0x02, 0x5d, 0x09, 0x49, 0x97, 0x46, 0x47, 0x56, 0x87, 0x6a,
	0x77, 0xe8, 0x58, 0x54, 0x86, 0x7e, 0x01, 0x9f, 0x5d, 0x70, 0x71, 0x9c, 0xb5, 0x24, 0x77, 0x0b,
	0xd7, 0xf0, 0x8a, 0x94, 0xb1, 0xb0, 0x7a, 0xdb, 0x2a, 0x79, 0x95, 0x50, 0xa1, 0x3e, 0x98, 0xfa,
	0x00, 0xae, 0x7a, 0xcf, 0xd0, 0x31, 0x81, 0x2c, 0x6d, 0xaa, 0xa6, 0x59, 0x47, 0xf0, 0x3c, 0x83,
	0x44, 0xb0, 0xf5, 0x4e, 0x04, 0x33, 0x3a, 0x4e, 0x13, 0x39, 0x6c, 0x36, 0xf0, 0x74, 0xcf, 0x17,
	0x9e, 0xae, 0x5c, 0xcc, 0x9e, 0x75, 0x81, 0x4e, 0xf2, 0x1c, 0x1e, 0x9d, 0x32, 0xd6, 0x8b, 0x23,
	0xae, 0xff, 0xc0, 0x78, 0x38, 0xd0, 0x97, 0x89, 0x8c, 0xa5, 0x62, 0xcd, 0x75, 0x3c, 0x7b, 0x39,
	0xd3, 0x94, 0x84, 0x22, 0xe3, 0xbd, 0xd4, 0xac, 0x79, 0x1f, 0x45, 0x4a, 0x38, 0xe4, 0x37, 0xf0,
	0xb8, 0x48, 0x7d, 0xcb, 0xc6, 0x99, 0xa5, 0x0d, 0x14, 0x5b, 0x0c, 0x20, 0x2f, 0xe0, 0x73, 0x9b,
	0x9d, 0xa7, 0xd4, 0xd7, 0x32, 0x39, 0x89, 0xa5, 0x3f, 0xb0, 0x4d, 0xb5, 0xb9, 0x89, 0xb2, 0x8b,
	0xd8, 0xc6, 0x6e, 0x9e, 0x75, 0x18, 0x49, 0xff, 0xc6, 0x69, 0x0d, 0x9a, 0x0f, 0xac, 0xdd, 0x85,
	0x80, 0xd6, 0x6f, 0x61, 0x63, 0xa6, 0x2e, 0xe4, 0x1b, 0x4e, 0xa5, 0xa4, 0xe1, 0x34, 0x72, 0x0d,
	0xa7, 0x75, 0x0e, 0xeb, 0x85, 0x9c, 0x2d, 0xe9, 0x56, 0xed, 0xbc, 0x70, 0xbd, 0xdb, 0x48, 0x43,
	0x6b, 0xc4, 0xf2, 0xaa, 0xfe, 0x9f, 0xc6, 0xd7, 0x3a, 0x87, 0x2f, 0x3e, 0x91, 0x19, 0x77, 0xa9,
	0xaa, 0xe5, 0x7b, 0xe8, 0x7f, 0xaa, 0x70, 0xcf, 0xe5, 0x1d, 0xf9, 0x0a, 0x1a, 0x5a, 0x6a, 0x1a,
	0x5d, 0xab, 0x51, 0x1c, 0x47, 0x13, 0xd7, 0xb2, 0xea, 0x48, 0xeb, 0x21, 0x89, 0x3c, 0x85, 0xba,
	0x2f, 0x87, 0x43, 0x29, 0xae, 0x63, 0x29, 0x23, 0xe7, 0x21, 0xb0, 0xa4, 0x4b, 0x29, 0x23, 0xf2,
	0xa2, 0xd0, 0x5f, 0x2b, 0xe8, 0x84, 0xe6, 0xa2, 0xfc, 0x2e, 0xb4, 0xd7, 0x2e, 0xac, 0x46, 0x2c,
	0x08, 0x99, 0x29, 0x89, 0xe6, 0x56, 0xb4, 0x8a, 0x52, 0x9d, 0x37, 0xc8, 0xb4, 0xb9, 0xef, 0x90,
	0xe4, 0x00, 0xea, 0xd3, 0xa9, 0x53, 0x35, 0x57, 0x50, 0xf0, 0xe9, 0x8c, 0xe0, 0xf4, 0x26, 0xba,
	0x2a, 0x91, 0x97, 0x21, 0x7f, 0x81, 0x47, 0x65, 0x23, 0xac, 0x29, 0x84, 0x25, 0x0d, 0xa6, 0x93,
	0xb5, 0x87, 0x39, 0xad, 0x0f, 0x83, 0x12, 0x56, 0xeb, 0x35, 0xd4, 0x73, 0x1b, 0x2f, 0x09, 0xcd,
	0x4e, 0x31, 0x61, 0x36, 0x3b, 0xe9, 0xf4, 0x7e, 0x60, 0x7f, 0xf3, 0x71, 0xff, 0xb3, 0x19, 0x30,
	0x8b, 0x66, 0x4b, 0x34, 0xfe, 0xb2, 0xa8, 0xf1, 0x8b, 0x4e, 0x6e, 0x30, 0x9f, 0x8a, 0xdb, 0x4d,
	0xe7, 0x94, 0xdf, 0xc2, 0xe3, 0x85, 0x87, 0x2b, 0xb1, 0x72, 0x54, 0xb4, 0xb2, 0xd7, 0x29, 0x79,
	0x1e, 0x94, 0x79, 0x6b, 0xd6, 0x6e, 0xfb, 0x9f, 0xcb, 0xb0, 0x91, 0xf6, 0x90, 0x04, 0x73, 0xc3,
	0x8e, 0x09, 0x5c, 0xbc, 0xa7, 0x11, 0x0f, 0x4c, 0xbf, 0x52, 0xee, 0x7a, 0x16, 0x89, 0x6e, 0x98,
	0xc8, 0xa1, 0x96, 0xb3, 0x61, 0x22, 0x87, 0xfa, 0x06, 0xb6, 0x0a, 0x84, 0x4b, 0x8c, 0x05, 0xd7,
	0x13, 0x37, 0xa0, 0x2c, 0xe0, 0xfe, 0x4f, 0xd3, 0xfc, 0x73, 0x78, 0x84, 0xb4, 0x9e, 0xa6, 0x9a,
	0xfb, 0xb9, 0x1d, 0xd9, 0x41, 0xbe, 0x9c, 0x49, 0x0e, 0xe1, 0xcb, 0xb9, 0x32, 0x77, 0x12, 0x31,
	0x1f, 0x9b, 0x92, 0x98, 0x60, 0x2b, 0x6e, 0x78, 0x9f, 0xc4, 0xb4, 0xbf, 0x85, 0xb5, 0xcc, 0x79,
	0xa4, 0x03, 0xab, 0x78, 0xa1, 0xd2, 0xc1, 0x76, 0x2b, 0x4d, 0xde, 0xa2, 0x7b, 0x3d, 0x87, 0x6a,
	0xff, 0xad, 0x02, 0x1b, 0x47, 0x52, 0x28, 0x26, 0xd4, 0x48, 0x39, 0xd7, 0xff, 0x0e, 0xd6, 0xaf,
	0xf8, 0x90, 0xc9, 0x91, 0xc6, 0x16, 0xaf, 0xb3, 0x19, 0xd9, 0x3e, 0x46, 0x3b, 0xe9, 0x63, 0xb4,
	0x73, 0xec, 0x1e, 0xa3, 0x5e, 0x11, 0x6f, 0x7a, 0x63, 0xef, 0x86, 0xc7, 0x45, 0x25, 0xb6, 0xee,
	0xcc, 0x33, 0xc8, 0x39, 0x90, 0x93, 0x61, 0xac, 0x27, 0x58, 0xa7, 0xb3, 0x59, 0xac, 0x72, 0x97,
	0xcd, 0x12, 0x21, 0xf3, 0x08, 0xb8, 0xa0, 0xe3, 0xab, 0x71, 0x8f, 0x7f, 0xcf, 0xdc, 0x58, 0x35,
	0x25, 0xb8, 0xe9, 0x14, 0x25, 0x10, 0x60, 0x67, 0xa5, 0x02, 0x8d, 0x6c, 0x43, 0x3d, 0x5d, 0x9f,
	0x51, 0x3b, 0x0a, 0x55, 0xbd, 0x3c, 0x89, 0x74, 0xe1, 0xe1, 0x05, 0x1d, 0x9f, 0xdc, 0xf2, 0x80,
	0x09, 0x9f, 0x1d, 0x84, 0x0c, 0x39, 0xe6, 0xb9, 0x64, 0xa0, 0xa5, 0x3c, 0xd3, 0x5a, 0x8b, 0x74,
	0xe3, 0x01, 0x7c, 0x12, 0xad, 0x79, 0x25, 0x9c, 0xf6, 0x3b, 0x58, 0xcb, 0x82, 0x42, 0x9a, 0x70,
	0xef, 0x90, 0xfa, 0x37, 0x4c, 0x04, 0xee, 0xf2, 0xa5, 0xcb, 0x5c, 0xb0, 0x97, 0x0b, 0xc1, 0x9e,
	0x09, 0x68, 0x16, 0xec, 0xbf, 0x2f, 0xc3, 0x8a, 0x49, 0x41, 0x66, 0x1e, 0x25, 0xaf, 0xb0, 0x25,
	0xbb, 0x6b, 0xe5, 0x56, 0xa4, 0x03, 0x55, 0xdc, 0x9a, 0xd5, 0xd7, 0x9a, 0xf3, 0xfe, 0x55, 0xfa,
	0xff, 0x09, 0x0f, 0x71, 0x66, 0x6f, 0x47, 0x03, 0xca, 0xc5, 0xf9, 0x31, 0x06, 0x6c, 0xcd, 0x4b,
	0x97, 0xe4, 0xe7, 0x50, 0x4b, 0xdc, 0x63, 0x0a, 0x23, 0x51, 0xef, 0x6e, 0xcc, 0xbc, 0xb1, 0xbc,
	0x0c, 0x40, 0x76, 0xe1, 0x9e, 0xb2, 0xd5, 0x15, 0x83, 0x52, 0xef, 0xde, 0x2f, 0xd6, 0x5c, 0x2f,
	0x65, 0x93, 0x0e, 0xac, 0xa9, 0x34, 0x95, 0xdd, 0xa0, 0xba, 0x39, 0x9b, 0xe2, 0xde, 0x14, 0x62,
	0xf0, 0x7e, 0xea, 0x0d, 0x0c, 0xd1, 0x14, 0x9f, 0x79, 0xc9, 0x9b, 0x42, 0xda, 0x5f, 0x03, 0x39,
	0x63, 0xfa, 0x70, 0x62, 0xfd, 0xe1, 0xb1, 0xbf, 0x8e, 0x98, 0xd2, 0xc6, 0x5d, 0x83, 0x82, 0xbb,
	0xec, 0xaa, 0xfd, 0x12, 0x3e, 0x2b, 0xa0, 0x55, 0x6c, 0x14, 0x99, 0x09, 0x00, 0x4d, 0xb8, 0x8b,
	0xd3, 0x98, 0x1e, 0x46, 0x33, 0xcf, 0xb2, 0xba, 0xef, 0xa1, 0x81, 0xeb, 0x1e, 0x4b, 0x6e, 0xb9,
	0xcf, 0xc8, 0x29, 0xd4, 0x73, 0xaa, 0x48, 0xfa, 0x20, 0x9d, 0xdf, 0x4c, 0xab, 0x55, 0xc6, 0xb2,
	0x96, 0xdb, 0x3f, 0x3a, 0xfc, 0xfd, 0x9f, 0xbe, 0x0b, 0xb9, 0x1e, 0x8c, 0xfa, 0x1d, 0x5f, 0x0e,
	0xf7, 0x3f, 0xf0, 0x70, 0xc8, 0x84, 0xde, 0x13, 0x4c, 0x7f, 0x94, 0xc9, 0x8d, 0xda, 0x97, 0x54,
	0x71, 0xb5, 0x97, 0xc4, 0xfe, 0x5e, 0x9c, 0xc8, 0xf1, 0x64, 0x7f, 0xfe, 0xff, 0x54, 0xfd, 0x55,
	0x8c, 0xf6, 0xaf, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xb1, 0xa1, 0xde, 0xc4, 0x12, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateServiceClient interface {
	GetByHeight(ctx context.Context, in *GetByHeightRequest, opts ...grpc.CallOption) (*GetByHeightResponse, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) GetByHeight(ctx context.Context, in *GetByHeightRequest, opts ...grpc.CallOption) (*GetByHeightResponse, error) {
	out := new(GetByHeightResponse)
	err := c.cc.Invoke(ctx, "/state.StateService/GetByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
type StateServiceServer interface {
	GetByHeight(context.Context, *GetByHeightRequest) (*GetByHeightResponse, error)
}

// UnimplementedStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (*UnimplementedStateServiceServer) GetByHeight(ctx context.Context, req *GetByHeightRequest) (*GetByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByHeight not implemented")
}

func RegisterStateServiceServer(s *grpc.Server, srv StateServiceServer) {
	s.RegisterService(&_StateService_serviceDesc, srv)
}

func _StateService_GetByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.StateService/GetByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetByHeight(ctx, req.(*GetByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "state.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByHeight",
			Handler:    _StateService_GetByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/state/statepb/state.proto",
}
